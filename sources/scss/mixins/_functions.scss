@use "sass:math";

// Common variables
$browser-context: 16;
$screenWidth: 1400;


@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
	$min: map-get($breakpoints, $name);
	@return if($min != 0, $min, null);
}

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
	@return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// font-size
@function em($pixels, $context: $browser-context) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	@return math.div($pixels, $context) * 1em;
}

@function rem($pixels, $context: $browser-context) {
	@if (unitless($pixels)) {
		$pixels: $pixels * 1px;
	}

	@if (unitless($context)) {
		$context: $context * 1px;
	}

	@return math.div($pixels, $context) * 1rem;
}

// Size
@function sizes($size) {
	@return if($size == 0, #{$size} !important, rem($size) !important)
}

// Replace `$search` with `$replace` in `$string`
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

$index-screen: math.div(($screenWidth * 0.01), $browser-context);

@function vw($target) {
	@return math.div($target * 100, $screenWidth) * 1vw;
}

@function aspect-ratio($one-value, $two-value, $new-value) {
	@return round(math.div($two-value, math.div($one-value, 100)) * math.div($new-value, 100));
}

@function math-clamp($min-size, $max-size) {
	$val: math.div(math.div($max-size, $browser-context), $index-screen) * 1vw;
	@return clamp(#{rem($min-size)}, #{$val}, #{rem($max-size)});
}

@function math-max($min-size, $size) {
	$val: math.div(math.div($size, $browser-context), $index-screen) * 1vw;
	@return max(#{rem($min-size)}, #{$val});
}
